name: Issue Screening

on:
  issues:
    types: [opened, edited]

jobs:
  screen-issues:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Get issue details
        id: issue
        uses: actions/github-script@v5
        with:
          script: |
            const issue = context.payload.issue;
            core.setOutput('id', issue.id);
            core.setOutput('title', issue.title || "");
            core.setOutput('body', issue.body || "");
            core.setOutput('number', issue.number);

      - name: Check for keywords
        id: keyword-check
        run: |
          KEYWORDS=("star" "stars" "unusual" "activity" "spam" "badword" "inappropriate")
          ISSUE_TITLE="${{ steps.issue.outputs.title }}"
          ISSUE_BODY="${{ steps.issue.outputs.body }}"
          ISSUE_TITLE_LOWER=$(echo "$ISSUE_TITLE" | tr '[:upper:]' '[:lower:]')
          ISSUE_BODY_LOWER=$(echo "$ISSUE_BODY" | tr '[:upper:]' '[:lower:]')
          CONTAINS_KEYWORD=false
          for keyword in "${KEYWORDS[@]}"; do
            if echo "$ISSUE_TITLE_LOWER" | grep -q "$keyword" || echo "$ISSUE_BODY_LOWER" | grep -q "$keyword"; then
              CONTAINS_KEYWORD=true
              break
            fi
          done
          echo "contains_keyword=$CONTAINS_KEYWORD" >> $GITHUB_OUTPUT

      - name: Close issue if it contains keywords
        if: steps.keyword-check.outputs.contains_keyword == 'true'
        uses: actions/github-script@v5
        with:
          github-token: ${{ secrets.ISSUE }}
          script: |
            try {
              const issueNumber = context.payload.issue.number;
              await github.rest.issues.update({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: issueNumber,
                state: 'closed'
              });
              console.log(`Issue #${issueNumber} closed due to containing a keyword.`);
            } catch (error) {
              await github.rest.issues.addLabels({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: issueNumber,
                labels: ['spam', 'invalid']
              });
              await github.rest.issues.lock({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: issueNumber,
                lock_reason: 'spam'
              });
              console.log(`Issue #${issueNumber} closed, labeled and locked due to containing a keyword.`);
            } catch (error) {
              console.error("Failed to handle issue:", error);
            }
